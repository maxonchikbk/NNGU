<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>  Считаем, что первичный и вторичный алфавит имеют следующий вид A=B={0,1}. Мы разбиваем кодируемое сообщение x  на блоки длины k : x=(x1,..,xk)(xk+1,..,x2k)..(xsk+1,..,xsk+r) ,где r &lt;=k (длина последнего блока может оказаться меньше k и в этом случае способ кодирования этого блока оговаривается особо). Мы рассматриваем блоки длины k и кодируем их взаимнооднозначно блоками длины n. В результате имеем: f: Ai-&gt;Vi , где |Ai|=k |Vi|=n , эту структуру будем называть равномерным n,k кодом. Отметим, что мы предполагаем, что в качестве кодируемого сообщения может быть любой двоичный вектор,  значит чтобы иметь возможность кодировать блок длины k i=1,..,2k и в качестве Ai всевозможные двоичные блоки длины k.
  Замечание 1 : определение равномерного кода с параметрами n,k можно дать при помощи озвученных ранее определений, если сказать, что рассматриваем блоки длины k как буквы некоторого алфавита и применяем к ним  равномерное побуквенное кодирование.
  Пример 1 :
Задано отображение:
00-&gt;000
01-&gt;001
10-&gt;110
11-&gt;011
Задает ли оно равномерное n,k кодирование? Видим, что праобразами являются всевозможные двоичные векторы длины 2. Если их рассмотреть как буквы некоторого алфавита, то отображение является равномерным побуквенным кодированием. Следовательно мы имеем равномерное кодирование с параметрами n=3, k=2.
  Замечание 2 : как следует из определения, равномерный n,k код является взаимнооднозначным. Заведомо чтобы иметь возможность взаимнооднозначного кодирования  n&gt;=k.
  Теперь рассмотрим только правые части отображения f и запишем их в матрицу V, в которой кодовые слова Vi располагаются построчно. Матрица V называется n,k кодом. Нетрудно видеть, что размерность этой матрицы 2kxn. Понятно, что по кодированию код строится однозначно, но по коду кодирование определяется неоднозначно. Каждому коду соответствует 2k! кодирований (число перестановок 2k элементов). Многие свойства кодирования определяются свойствами используемого кода.
  Пример 2 :
Рассмотрим равномерное кодирование с параметрами n=3, k=2 из примера1. Построим по нему код:
000
001
110
011
  Пример 3 :
Построим по коду из примера2 кодирование:
00-&gt;000
01-&gt;001
10-&gt;110
11-&gt;011
Или
11-&gt;000
01-&gt;001
10-&gt;110
00-&gt;011
Всего будет 24 варианта построения кодирование по коду.
  Итак, n,k код можно задать, указав параметры n,k и матрицу V размерности 2kxn в двоичном алфавите. 
Замечание 3 : следует понимать, то не любая тройка (n,k) V :|vij|={0,1} будет задавать n,k код. Для проверки задает ли тройка n,k код нужно убедиться в отсутствии в матрице V одинаковых строчек. Это придется делать в программе. На проверку одной матрицы уйдет [(l-1)+(l-2)+,..,+(2)]-это общее число сравнений строк, каждое сравнение двух строк происходит за n сравнений элементов. [(l-1)+(l-2)+,..,+(2)]n=(l+1)(l-2)n/2=O(l’3), где l’=max{n,l}.
  Пример 4 :
Например, тройка (5,2) V= |00000|   не задает n,k код.
                                              |00000|
                                              |10001|
                                              |01010|</value>
  </data>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>  Задано равномерное n,k кодирование . Это кодирование будет называться систематическим (не систематическим), если для f: Ai-&gt;Vi  из определения параграфа 3, где Ai=x1(i)..xk(i) Vi=y1(i)..yn(i) (расписали в виде двоичных векторов) можно (нельзя) выделить k элементное подмножество I={i1,..,ik} из {1,..,n} ,что выполняется  yi1(i)=x1(i), yi2(i)=x2(i), .., yik(i)=xk(i) для любого i=1,..,2k .
  Пример 1  :
Задано равномерное кодирование с параметрами n=5 k=2 :
00-&gt;00000
01-&gt;11001
10-&gt;11011
11-&gt;00010
Это кодирование не является систематическим: мы заведомо не сможем выбрать номера i1и i2 : yi1(4)=x1(4), yi2(4)=x2(4).
  Пример 2 :
Задано равномерное кодирование с параметрами n=5 k=2 :
00-&gt;00000
01-&gt;11001
10-&gt;00010
11-&gt;11011
Это систематическое кодирование:  I={i1,i2}, i1=4, i2=5.
  Задан n,k код . Этот код будем называть систематическим (не систематическим), если существует f: Ai-&gt;Vi  из определения параграфа 3, где Ai=x1(i)..xk(i) Vi=y1(i)..yn(i) (расписали в виде двоичных векторов) можно (нельзя) выделить k элементное подмножество I={i1,..,ik} из {1,..,n} ,что выполняется  yi1(i)=x1(i), yi2(i)=x2(i), .., yik(i)=xk(i) для любого i=1,..,2k .
  Подмножество I будем называть информационным, соответствующие разряды в векторах Vi информационными разрядами. Множество I’={1,..,n}\I назовем проверочным, соответствующие разряды в векторах Vi проверочными разрядами.
  Замечание 1 : систематический код, вообще говоря, может допускать много способов выбора информационных разрядов (в силу неоднозначности построения f,во-первых, и при каждой фиксированной f может быть несколько вариантов).  Следовательно, одному систематическому коду могут соответствовать несколько систематических кодирований.
Пример 3 :
Рассмотрим (5,2) код:
00000
11001
00010
11011
Он является систематическим, причем выбор информационных разрядов не единственен. 
Действительно, за информационные можно взять 4,1 или 4,2 или 4,5. 
  Замечание 2 : на позициях i1,..,ik в любом элементарном коде Vi стоят буквы из кодируемого блока Ai. 
  Замечание 3 : проверочные разряды  однозначно определяются в виде некоторых булевых функций от информационных разрядов, то есть для любого проверочного разряда j из I’ существует некоторая булева функция от k переменных yj=yj(x1,..,xk). Эту функцию можно найти в виде полинома Жегалкина.
  Пример 4 :
Задан систематический код с информационными разрядами 1,2 :
001
010
101
111
Записать схему кодирования.
Нетрудно видеть, что кодирование осуществляется по следующей схеме:
f : x1x2-&gt;y1y2y3, y1=x1, y2=x2, y3=x1x2+x2+1.
  Замечание 4 : для каждого из способов выбора информационных разрядов (в том случае если выбор неединственный), вообще говоря, свои функции.
  Замечание 5 :  множество I информационное тогда и только тогда, когда соответствующие I столбцы матрицы  V составляют по строкам всевозможные комбинации из 0 и 1.
  Замечание 6 : программа осуществляет поиск всевозможных вариантов выбора множеств I и I’на основании следующего алгоритма:
-для матрицы n,k кода перебираем всевозможные варианты выбора кодирования, затем для каждого кодирования проверяем систематическое ли оно и изменяем I  и I’ следующим образом:
  x1(1)..xk(1) -&gt; y1(1)..yn(1)
  x1(2)..xk(2) -&gt; y1(2)..yn(2)
   ………………………………..
  x1(2^k)..xk(2^k) -&gt; y1(2^k)..yn(2^k)
-берем первый столбец из кодируемой части и поочередно сравниваем его со столбцами из правой части. Из номеров столбцов, по которым произошли совпадения, формируем множество I1 , затем берем второй столбец и аналогичным образом формируем I2,.., берем столбец с номером k  и формируем Ik. Элементом множества I будет любой элемент принадлежащий I1xI2x..xIk. Для каждого элемента множества I легко строим I’ (I’={1,..,n}\I). Может оказаться, что одно из множеств Ii (те что строит алгоритм на каждом шаге) пустое, тогда данное на этом шаге кодирование не систематическое и к множеству I мы ничего не добавляем.
Алгоритм осуществляет выделение всевозможных вариантов информационных разрядов за l!*k*n*n операций (l-число строк матрицы A, l!-вариантов выбора кодирования, k-параметр кода, число столбцов в кодируемой части, n-с таким числом столбцов сравниваем каждый из правой части, n-за столько сравнений элементов сравниваем два столбца).</value>
  </data>
  <data name="richTextBox4.Text" xml:space="preserve">
    <value>Рассмотрим En={0,1}n –линейное пространство размерности n. Если n,k код такой, что множество {vi} замкнуто относительно операции + сложение по модулю два, то код называется линейным.
  Следствие 1 : если n,k код V линейный, то множество {vi} является подпространством пространства En.
  Следствие 2 : для доказательства линейности достаточно доказать замкнутость множества двоичных векторов относительно операции +.
  Пример 1 :
Задан n,k код:
00000
11001
00010
11011
Проверив замкнутость, убеждаемся, что он линейный.
  Следствие 3 : линейные коды допускают задание более простое нежели коды общего вида. Их можно задать с помощью базиса G, где строчки матрицы G являются образующими группы V. Матрица G называется порождающей матрицей линейного кода V. Понятно что между G и V взаимнооднозначное соответствие. Также, код можно задать в виде решения линейнонезависимой системы однородных уравнений HxT=0 , тогда V={x: HxT=0}. Матрица H называется проверочной матрицей кода V.
  Пример 2 :
Задан n,k код:
00000
01110
10111
11001
Проверив замкнутость, убеждаемся, что он линейный.
Как говорилось, его можно задать через базис G(V):
11001
01110
Перепишем в виде системы:
a1+a2+a5=0
a2+a3+a4=0
Выбираем переменные a1 a2 за базисные.
a2=a3+a4
a1=a2+a5=a3+a4+a5
Свободным переменным даем линейно независимые значения:
a1	a2	a3	a4	a5
1	1	1	0	0
1	1	0	1	0
1	0	0	0	1
Получаем H(V):
11100
11010
10001
Код задается множеством значений HyT=0.
Функции, выражающие контрольные разряды через информационные записываются на основании  H.
y1+y2+y3=0
y1+y2+y4=0
y1+y5=0
Выразим:
y3=y1+y2
y4=y1+y2
y5+y1
  Замечание 1 : сумма (+) кодовых векторов линейного кода дает вектор, принадлежащий данному коду.
  Замечание 2 : ограничение линейности есть условие на вид множества кодовых векторов.
  Замечание 3 :  если  код линейный, то он заведомо является систематическим. В случае линейного кода проверочные функции представления проверочных разрядов через информационные будут иметь более простой вид, нежели для систематических кодов общего вида. Функции будут линейными относительно своих аргументов. Это одна из причин рассмотрения линейных кодов.
  Итак, проверка произвольного n,k кода на то, является ли он линейным, заключается в проверке замкнутости множества элементарных кодов. Проверка осуществляется за (l-1)((l-1)+(l-2)+,.,+(2))n=(l-1)*n*(l+1)(l-2)/2 операций (l-число строк матрицы V, (l-1)-со столькими строками сравниваем каждую суммарную строчку, ((l-1)+(l-2)+,.,+(2))-общее количество сложений строк,n-каждое сложение двух строк за столько операций).</value>
  </data>
  <data name="richTextBox5.Text" xml:space="preserve">
    <value>Для x,y из En определим операцию + : x+y=(x1+y1,..,xn+yn). Расстояние Хэмминга называется величина p(x,y)=(x1+y1)+,..,(xn+yn). Кодовым расстоянием n,k кода V называется величина p(V)=min{p(vi,vj), i не равно j}.

  Пример 1 :
Задан n,k код:
000111
111000
101101
000000
Перебирая всевозможные пары кодовых слов, находим, что минимум будет на паре 000111 000000. Значит p(V)=p(000111,000000)=3.

  Теорема: 1. для того чтобы код V обнаруживал любые k&lt;=t ошибок, необходимо и достаточно, чтобы p(V)&gt;t.
2.для того чтобы код V исправлял любые k&lt;=t ошибок, необходимо и достаточно, чтобы p(V)&gt;2t.

  Пример 2 :
Код из примера1 заметит двойную ошибку, исправит одиночную.
Следствие 1 : кодовое расстояние- параметр определяющий помехоустойчивость кода.

  Замечание 1 : вычисление кодового расстояния в случае n,k кода, вообще говоря, происходит подсчетом расстояний Хэмминга между всевозможными парами кодовых слов.
  Замечание 2 : в случае когда n,k код линейный кодовое расстояние будет равно минимальному весу ненулевого кодового вектора.

  Пример 3 :
Задан линейный код:
11001
01110
10111
00000
p(11001)=3, p(01110)=3, p(10111)=4. Следовательно, p(V)=3.

  Итак, в случае произвольного n,k кода поиск всех расстояний между парами кодовых слов за [(l-1)+
+(l-2),..,+(2)]n=n*(l+1)(l-2)/2 операций  ([(l-1)+(l-2),..,+(2)] – столько раз складываем строчки; n-каждое сложение двух строчек за столько операций с элементами). В случае линейного кода за l*n операций.</value>
  </data>
  <data name="richTextBox6.Text" xml:space="preserve">
    <value>n,k код V называется квазилинейным, если существует r из En , такое что V=V1+r={x+r : x из V1}, где V1-линейный код.
  Пример 1:
Задан n,k код:
10000
01001
10010
01011
Проверим является ли он квазилинейным. Нетрудно видеть, что код является квазилинейным, так как представим в виде
V1+r, где r=10000, V1 линейный код и имеет вид:
00000
11001
00010
11011

 Следствие 1 : существует d из En  : d+V –линейный код.
 Следствие 2 : для V и V1 из определения выполняется p(V)=p(V1).
  
Замечание 3 : понятно, что всякий линейный код можно считать квазилинейным (для линейного кода r=0), нетрудно доказать, что всякий квазилинейный код является систематическим.

 Замечание 2 : V квазилинейный тогда и только тогда, когда существует элементарный код vi : V+vi – линейный код. Значит, для проверки квазилинейности кода можно проверить каждый из кодовых векторов : не дает ли он (если его сложить со всеми кодовыми векторами) линейный код. Если такой вектор есть, то код квазилинейный. Итак, проверку квазилинейности можно осуществить за l(l*n+”сложность проверки линейности”) (l-столько вариантов выбора строки, l-со столькими строками складываем, n-за столько операций).

  Пример 2 :
Задан n,k код:
10001
00110
11111
01000
Проверим является ли он квазилинейным. Возьмем первый кодовый вектор 10001, сложим его со всеми, получим:
00000
10111
01110
11001
Линейный код не получили. Возьмем четвертый кодовый вектор 01000, сложим его со всеми, получим:
11001
01110
10111
00000
Получился линейный код. Следовательно исходный код представим в виде (01000)+V1, где V1 –линейный. Следовательно исходный код квазилинейный.</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Пусть A={a1,..,an}-как уже говорилось ранее вторичный алфавит, B={b1,..,bm}-первичный алфавит. Инъективное отображение f  называется побуквенным кодированием, если f: B+-&gt;A+, где под A+ B+ понимаем множества слов соответствующих алфавитов, причем для любых l,k из B+ выполняется f(lk)=f(l)f(k).
  Замечание1 : если область определения отображения f есть множество слов алфавита B, то в частности в качестве слов алфавита B можно рассматривать буквы этого алфавита. Получаем f(bi)=vi  i=1,..,m , где vi- будем называть элементарными кодам. Для задания отображения f достаточно задать f(bi)=vi  i=1,..,m.
  Замечание2 : как следует из определения, отображение f задает инъективное отображение, а значит побуквенное кодирование является кодированием.
  Замечание3 : взаимнооднозначное соответствие между bi и vi не является достаточным для инъективности.
  Если имеем побуквенное кодирование и все элементарные коды одной длины |v1|=|v2|=,..,=|vm| , то есть все буквы bi первичного алфавита кодируются словами одинаковой длины, то говорим о равномерном побуквенном кодировании. Если имеем побуквенное кодирование и не все элементарные коды одной длины, то говорим о неравномерном побуквенном кодировании. Если отображение таково, что все элементарные коды одной длинны, то для проверки инъективности достаточно убедиться в отсутствии одинаковых vi.
  Пример 1 :
A={0,1}, B={a,b,c,d}
Задано побуквенное отображение:
a-&gt;001
b-&gt;000
c-&gt;100
d-&gt;010
Отображение инъективное. Значит, в соответствии с определением этого параграфа это побуквенное отображение является побуквенным кодированием. Замечаем, что все элементарные коды одной длины (3), следовательно это равномерным побуквенное кодирование.
  Пример2 :
A={0,1}, B={a,b,c,d}
Задано побуквенное отображение:
a-&gt;010
b-&gt;001
c-&gt;00001
d-&gt;10
e-&gt;11
Отображение инъективное, так как все двоичные образы различны. Значит, в соответствии с определением этого параграфа это побуквенное отображение является побуквенным кодированием. Замечаем, что не все элементарные коды одной длины , следовательно это неравномерным побуквенное кодирование.
  Пример3 :
Рассмотрим кодирование из примера 1. Нетрудно видеть, что кодирование взаимнооднозначное (так как код префиксный).
  Пример4 :
Рассмотрим кодирование из примера2 . Нетрудно видеть, что кодирование взаимнооднозначное (так как код префиксный).
  Пример 5 :
A={0,1}, B={a,b,c,d,e}
Задано побуквенное отображение:
a-&gt;010
b-&gt;001
c-&gt;0001
d-&gt;00
e-&gt;01
 Нетрудно видеть, что оно не является инъективным. Действительно, попытаемся декодировать 0001 : f-1(0001)=c или f-1(0001)=de. 
 Пример 6 :
Примером  побуквенного кодирования будет кодирование ASCII.</value>
  </data>
</root>